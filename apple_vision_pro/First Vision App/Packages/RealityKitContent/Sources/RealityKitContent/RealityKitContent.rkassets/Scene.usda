#usda 1.0
(
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["_PlainMaterial", "Group", "Skull", "ParticleEmitter", "TigerGrowl04"]
    rel material:binding = None (
        bindMaterialAs = "weakerThanDescendants"
    )

    def "_PlainMaterial" (
        active = true
        references = @_PlainMaterial.usda@
    )
    {
        float3 xformOp:scale = (1, 1, 1)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "PlainMaterial"
        {
            over "UsdPreviewSurface"
            {
                float inputs:clearcoat = 1
                float inputs:clearcoatRoughness = 1
                color3f inputs:emissiveColor = (0, 0, 0) (
                    colorSpace = "Input - Texture - Linear - sRGB"
                )
                color3f inputs:emissiveColor.connect = None
                float inputs:ior = 0
                float inputs:metallic = 0
                normal3f inputs:normal = (1, 0, 1)
                float inputs:occlusion = 1
                float inputs:opacityThreshold = 0
                float inputs:roughness = 1
            }
        }
    }

    def Xform "Group" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, -1.5707963, 0)
        }
    )
    {
        reorder nameChildren = ["Sphere", "Cylinder", "Sphere_1", "Sphere_3"]
        quatf xformOp:orient = (0.71003675, 0, -0.7041646, 0)
        float3 xformOp:scale = (0.99999994, 1, 0.99999994)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Xform "Group" (
            active = true
            customData = {
                float3 rotationEulerHint = (0, -1.5707963, 0)
            }
        )
        {
            def Cylinder "Cylinder" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
                customData = {
                    float3 rotationEulerHint = (-1.5749264, 1.1920929e-7, -1.3434641e-7)
                }
            )
            {
                uniform token axis = "Y"
                double height = 1
                rel material:binding = </Root/Group/Group/Cylinder/DefaultMaterial>
                double radius = 0.1
                quatf xformOp:orient = (0.705645, -0.7085655, 6.905825e-8, -2.5849978e-8)
                float3 xformOp:scale = (0.9999998, 0.9999999, 0.9999998)
                float3 xformOp:translate = (0, -0.0018134117, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Material "DefaultMaterial"
                {
                    int inputs:h = 1 (
                        customData = {
                            dictionary realitykit = {
                                float2 sizeInSubgraph = (100.5, 53)
                            }
                        }
                    )
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex
                    prepend token outputs:surface.connect = </Root/Group/Group/Cylinder/DefaultMaterial/DefaultSurfaceShader.outputs:surface>
                    float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (0, 109.5)
                    float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

                    def Shader "DefaultSurfaceShader"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        float inputs:clearcoat = 0.05
                        float inputs:clearcoatRoughness = 0
                        color3f inputs:diffuseColor = (0, 0, 0) (
                            colorSpace = "Input - Texture - sRGB - Display P3"
                        )
                        color3f inputs:diffuseColor.connect = None
                        color3f inputs:emissiveColor = (0, 0, 0) (
                            colorSpace = "Input - Texture - sRGB - sRGB"
                        )
                        color3f inputs:emissiveColor.connect = None
                        float inputs:ior = 1
                        float inputs:metallic = 0.2
                        float inputs:occlusion = 0.2
                        float inputs:opacityThreshold = 0
                        float inputs:roughness = 1
                        token outputs:surface
                    }

                    def Shader "MaterialXPreviewSurface"
                    {
                        uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                        token outputs:out
                        float2 ui:nodegraph:node:pos = (-255, 105)
                        float2 ui:nodegraph:node:size = (207.5, 199)
                    }
                }
            }

            def Sphere "Sphere_3" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
                customData = {
                    float3 rotationEulerHint = (0, 0, 0)
                }
            )
            {
                rel material:binding = </Root/Group/Group/Cylinder/DefaultMaterial> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double radius = 0.1
                quatf xformOp:orient = (1, 0, -1.4870581e-7, 0)
                float3 xformOp:scale = (1.0000001, 1, 1.0000001)
                float3 xformOp:translate = (8.656886e-11, -0.003412312, -0.4999964)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def RealityKitComponent "Collider"
                {
                    uint group = 1
                    uniform token info:id = "RealityKit.Collider"
                    uint mask = 4294967295
                    token type = "Default"

                    def RealityKitStruct "Shape"
                    {
                        float3 extent = (0.2, 0.2, 0.2)
                        float radius = 0.05
                        token shapeType = "Sphere"
                    }
                }

                def RealityKitComponent "InputTarget"
                {
                    uniform token info:id = "RealityKit.InputTarget"
                }
            }

            def Sphere "Sphere" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
                customData = {
                    float3 rotationEulerHint = (0, 0, 0)
                }
            )
            {
                rel material:binding = </Root/Group/Group/Cylinder/DefaultMaterial> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double radius = 0.1
                quatf xformOp:orient = (1, 0, -1.4870581e-7, 0)
                float3 xformOp:scale = (1.0000001, 1, 1.0000001)
                float3 xformOp:translate = (0.0000069198436, 0.15611106, 0.39916402)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def RealityKitComponent "Collider"
                {
                    uint group = 1
                    uniform token info:id = "RealityKit.Collider"
                    uint mask = 4294967295
                    token type = "Default"

                    def RealityKitStruct "Shape"
                    {
                        float3 extent = (0.2, 0.2, 0.2)
                        float radius = 0.05
                        token shapeType = "Sphere"
                    }
                }

                def RealityKitComponent "InputTarget"
                {
                    uniform token info:id = "RealityKit.InputTarget"
                }
            }

            def Sphere "Sphere_1" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
                customData = {
                    float3 rotationEulerHint = (0, 0, 0)
                }
            )
            {
                rel material:binding = </Root/Group/Group/Cylinder/DefaultMaterial> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double radius = 0.1
                quatf xformOp:orient = (1, 0, -1.4870581e-7, 0)
                float3 xformOp:scale = (1.0000001, 1, 1.0000001)
                float3 xformOp:translate = (-0.000045250054, -0.14827432, 0.4054461)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def RealityKitComponent "Collider"
                {
                    uint group = 1
                    uniform token info:id = "RealityKit.Collider"
                    uint mask = 4294967295
                    token type = "Default"

                    def RealityKitStruct "Shape"
                    {
                        float3 extent = (0.2, 0.2, 0.2)
                        float radius = 0.05
                        token shapeType = "Sphere"
                    }
                }

                def RealityKitComponent "InputTarget"
                {
                    uniform token info:id = "RealityKit.InputTarget"
                }
            }
        }

        def "Cylinder"
        {
        }
    }

    def "Skull" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, -1.4883192, 0)
        }
        references = @Skull.usdz@
    )
    {
        quatf xformOp:orient = (0.73565763, 0, -0.6773535, 0)
        float3 xformOp:scale = (2.457304, 2.457304, 2.457304)
        float3 xformOp:translate = (1.2044241, -0.14923598, -0.015501738)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Xform "ParticleEmitter" (
        customData = {
            float3 rotationEulerHint = (-0.050438374, 1.4355491, -1.6207746)
        }
    )
    {
        quatf xformOp:orient = (0.5310198, 0.4633033, 0.46692407, -0.5341816)
        float3 xformOp:scale = (1, 0.9999998, 0.9999998)
        float3 xformOp:translate = (0.4933054, 0, -0.007859945)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "VFXEmitter"
        {
            token info:id = "RealityKit.VFXEmitter"

            def RealityKitStruct "currentState"
            {
                token emitterShape = "Point"
                bool isLocal = 0

                def RealityKitStruct "mainEmitter"
                {
                    float4 endColorA = (0.9999908, 1, 1, 1)
                    float4 endColorB = (1, 1, 1, 1)
                    float4 startColorA = (0.999991, 1, 1, 1)
                    float4 startColorB = (1, 1, 1, 1)
                    bool useEndColor = 0
                    bool useEndColorRange = 0
                    bool useStartColorRange = 0
                }

                def RealityKitStruct "spawnedEmitter"
                {
                }
            }
        }
    }

    def "BrownMerinoWool" (
        active = true
        prepend references = @BrownMerinoWool.usdz@</BrownMerinoWool>
    )
    {
        float2 ui:nodegraph:realitykit:subgraphOutputs:size = (181.5, 99)

        over "Basecolor"
        {
            float2 ui:nodegraph:node:size = (148.5, 199)
        }

        over "Roughness"
        {
            float2 ui:nodegraph:node:size = (148.5, 199)
        }

        over "Metallic"
        {
            float2 ui:nodegraph:node:size = (148.5, 199)
        }

        over "MaterialXPreviewSurface"
        {
            float2 ui:nodegraph:node:size = (207.5, 199)
        }

        over "add"
        {
            float2 ui:nodegraph:node:size = (61.5, 36.5)
        }

        over "multiply"
        {
            float2 ui:nodegraph:node:size = (60, 36)
        }

        over "Normal"
        {
            float2 ui:nodegraph:node:size = (148.5, 199)
        }
    }
}

