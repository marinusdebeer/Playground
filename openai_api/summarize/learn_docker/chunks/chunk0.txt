 Hey, do you want to see me build a Docker container? Yeah, let's do it real quick. Done. Want to see it again? Done. Man, that was fast. If you're in IT, you gotta know it. If you want to learn cloud, Azure, AWS, Google, Linode, DevOps, networking, systems, I think I said everything right. So, I hope you have your coffee ready. In this video, we're covering three things. First, what the junk is Docker? Two, you're getting hands-on with Docker. I'm giving you access to a free lab thanks to the sponsor of this video, Linode. And then three, we'll go a bit deeper, talk about the big why. Why Docker? Alright, let's do it. Okay, what the junk is a Docker container? Whoa, whoa, whoa, we're getting ahead of ourselves here. Before we can define what a Docker container is, we have to first define what it's replacing. Virtual machines. What is a virtual machine? How many of you already know? Check the timestamps to jump forward, but we're going to cover what it is real quick. And I actually have a ton of virtual machines running on servers in my data center right now. And I've been meaning to get those servers out of there because I've been paying a high bill. I want to bring those home with me right now. Let's go get it. Who's things should I unplug? Goodbye, data center. So here's one of my babies, my servers. Now, before we answer the question, what in the world is a Docker container? We have to first talk about what's a virtual machine. Let's dig in. So this is my server. Traditionally, before virtual machines, you would install one operating system on this piece of hardware. All of the server's resources from the CPU to the RAM to the hard drive, all of it was dedicated to one operating system, one server OS. So like I might just have Linux and this is my Linux server, or I might just have Windows. This would be my Windows server 2016. Now, what's the issue with that? Well, none really, unless you want another server, another operating system. So before virtual machines, if you wanted a Windows server and a Linux server, you had to have two physical servers like this. So that's where virtualization comes in. Instead of installing one operating system, we're going to install something called a hypervisor. Now, a hypervisor is kind of like an operating system, but it only has one goal. It's to help you carve up or divide your server's resources into multiple servers. Now, there are a ton of hypervisors, but the most popular one would be VMware, which is what I have installed on my servers. And specifically, it's called ESXi. Bonus points if you tell me in the comments what this means or what it stands for. And simply, what it allows us to do is take a portion of our server's resources, maybe two gigs of RAM, two CPUs, 100 gigabytes of hard drive space. And this will be our Ubuntu server. And then on the same server, I can say over here, I can have one CPU, not cup, one CPU, two gigs of RAM, 40 gigs of hard drive space. And that will be my Windows Server 2016. And I can keep doing this until my server runs out of resources. Or I can even make these bigger, going from, I don't know, one CPU to 41. I mean, you can go crazy. Virtual machines are amazing, and people use them every single day. But that's not how Docker works. In fact, Docker is kind of, well, not just kind of. It's different. When we use Docker containers, it takes us back to before virtualization. We're going to install one operating system on this entire thing. So one operating system gets access to everything our server has to offer. But why do that? That's the big question, right? What is Docker doing? Here's what it is. And this is crazy. I'm going to drop this line on you, okay? Our virtualization and virtual machines are virtualizing hardware. Docker virtualizes the operating system. What? What does that even mean? [♪ music playing ♪ Now, this right here is what we commonly see when we visualize how virtualization works. We have our hardware, we've got our hypervisor, and then we have our guest operating systems. But let me show you what Docker looks like. We'll always have our hardware. But instead of a hypervisor, like we just discussed, we're going to have one operating system installed on top of this hardware, or onto the hardware. And let's just say for our case, we are going to install Ubuntu. Now, here we go. We'll then have our good old buddy, Docker, fly in and make some magic happen. Docker installs like any other application you might install on Linux. It'll be a process running or a daemon running. And then using Docker, we will virtualize portions of our operating system, in this case, Ubuntu, to create containers. Which, by the way, we'll define here in a moment, but they're really doing the same thing as these virtual machines over here. They have the same function, and they have a lot of the same qualities, which is why it's kind of cool how they can replace virtual machines. Controversial, but that's what I think. And these containers, much like VMs, can be running a different operating system. CentOS, and even Ubuntu. You can install Ubuntu on Ubuntu. What? Okay, but what are these things? What are containers? I like to think of them as crazy fast, lightweight microcomputers. And don't let micro fool you. They can be as powerful as you want them to be. And similar to a virtual machine, they'll have their own operating system, their own CPU processes, their own memory, their own network. And the most important thing, and I think it's really appropriate for nowadays, is that they're quarantined. They are isolated. They are secure. As far as they understand, they are their own thing. They might as well be installed on bare metal servers because that's how isolated they are. Wilson! They're as isolated as you are right now. What, too soon? And let me say it again. These suckers are lightweight, and they are wicked fast. Like you saw at the beginning of this video. Click, bam, it's there. Now we'll cover why they're more lightweight, why they're faster, and more of why they're amazing here in a moment, but I think it's time. I think it's time you got your hands dirty, your feet wet, all those things. We're going to do that right now. Time to get your hands on with Docker containers. I'm so excited about this. You might say I can't contain myself. Sorry. Okay, here we go. Fire up your web browser. Go to the link below, linode.com forward slash network chuck. And you get $20 of free credit, more than enough to play with Docker. So go ahead and create that free account, and we will start labbing right now. Now, as I mentioned before, Linode is a cloud service provider. Very similar to AWS, Azure, Google, and we're going to use them as our cloud service provider right now. So from the dashboard, we'll go to the top right and click on create, and we'll create a Linode. Now, right now you should be on distributions. I want you to click on one click. Click on that. And this is what's really cool about this. Look at all these prebuilt apps you can just deploy in the cloud. WordPress, open VPN, run your own VPN server in the cloud. Minecraft. Okay, cool. CS Go. I kind of want to do this now. Anyways, the one we want to look at now is obviously Docker. Bam. I'll select Docker. Now, you can install and run Docker anywhere. Windows, Linux. You can install it on a virtual machine. But this is great because it makes it easy. Docker is already ready to go. I'll just click create. I'll select my size. $10 a month. Hey, that's half of what you are getting for free right now. I'll name it my frigging sweet Docker lab. And then a root password for your root user. And then click create. Ah, I forgot my region. I'm in Dallas. That way I get super fast performance. Go. Now, this is essentially creating a virtual machine for you in a Linux cloud, and it's pre-baked with Docker. And once yours is ready, click on launch console at the very top here. And right here in the browser, you have access as soon as it's done doing its updates. But if you're like me, like to use your own terminal, more of a homey feel, so I'll grab the public IP address right here, copy that, and open up my own, which is Solar Putty. I highly recommend Solar Putty. You should use it. Go download it now. Link below. It's free. And I'll connect. Your name, root, and the password is what I just set. And I'm in. I'll clear this out. I've got my own ready-to-run Docker empire. Yeah, I'll call it that. So for this lab, we're going to do three things. We're going to install CentOS. We're going to install Alpine. And a third mystery thing, which makes Docker the coolest thing ever. So hang tight. Let's do, let's do CentOS first. First, I need the image. So I'll do Docker pull CentOS. What this is doing is it's going out to the Docker hub, which is a registry of Docker images. These images are what we use to run or create our containers. I'll show you real quick. So we'll go ahead and pull the image for CentOS. It'll go out and find it. And download it. Bam, we've got it. So now with that CentOS image, we're going to run our first Docker container. So it'll be the command, Docker run. We're going to use a few switches, dash D and dash T. Then we'll do dash dash name to name this container. I'll name mine can't contain myself. Name yours whatever you want. And then at the end, I'll specify the image I want to use, which is the one we just pulled down, CentOS. And this is how fast Docker containers are created and run. It's running. That was it. A virtual machine booting a virtual machine takes a whole lot longer than that. That's crazy. So let's make sure it's running. We'll use command Docker PS to see our running Docker containers. There she is. And she's so pretty. Look at her. That is CentOS isolated, secure, running with its own operating system, CPU, memory, network. Oh, it's quarantined. But let's, um, let's walk into the room real quick. We can connect to CentOS and start playing around with it by using the command Docker exec. I'll use the switch dash IT, and then I'll reference the name. We named it. So it was can't contain myself for me. If I spell it right. And then after the name, I'll specify. I want to connect to the bash shell. Boom. And I'm in CentOS. I am in a container. And look, I mean, it even has its own file system. Like it's completely separate to get out of there. We'll just do a quick type in exit. And we're back home. And you'll know where you are. If you should pay attention to route at blah, blah, blah. That's the container ID. We were just in CentOS, um, over here is my Docker machine here. So I'm gonna clear my screen. Let's do another one. We'll do Docker. Cool. Let's say we pull down Alpine, a very popular Linux distribution. Cause it's very, uh, very lightweight, especially for Docker. See, I mean, it pulled it down so quickly. And we'll do Docker run dash T dash D I'll name this. Oh yeah. And then the image name was Alpine. Boom. Another one started. If I do Docker PS two containers running. Awesome. Let's connect to it. Docker exec dash it. Oh yeah. And then Alpine, I'll just connect to the shell. So I'll type in S H and boom. I'm there. I'm an Alpine, a separate operating system, a separate container. Quarantine. It's so cool. You know what? You can do this too. If you want, I'm going to install a whole bunch of things right now. Okay. So now if I do Docker PS, I got a few things going on. I've got three different flavors of Ubuntu running right now. 16, 14 and 18 all in the same server. That's amazing. WordPress. It's it's, it's cool. Now for number three, and I want you to do this with me. This is actually a, um, a Docker image that I created a while back for my Azure course on CBT nuggets. If you want to check that course out link below, but using this image, I want to demonstrate the power, the amazingness. Is that a word? Yes, it is now of Docker. Let's do it real quick. So first I want you to pull down my image. Now to find it, let's go to Docker hub. It's hub.docker.com. This is a registry where you can download and pull all these images from Docker. And they have a ton of stuff. Some of the stuff they have is from me. So if you type in network Chuck in the search bar, I come up here. And actually I have two out there. I don't know what the other one's for, but the one I want you to click on is coffee-based training has 879 downloads. That's pretty cool. Jump in there and even shows you like the command you can use to pull down this image. Now don't use that just yet. I want you to copy the network Chuck port slash NC coffee, and we're going to use the tag French press. And I'll show you how to use a tag right now. So the command will be Docker pool. I'll paste in my name here. The network Chucky Chucky, the network Chuck port slash NC coffee, and then colon French press the tag basically gives us the ability to download different versions of a particular image. I did that with Ubuntu just earlier. I could specify the tag 16, 17, whatever, and download different versions. So I'm gonna pull down my image. Boom. It's ready. Now I'm going to run it clear things out here. So I'll do Docker run dash T dash D. And then one more switch here, dash P which stands for ports. And we're going to map port 80, which is a port for a website. Obviously we'll map that from our Docker container to our host. And for any exam people out there who are studying for the DevNet associate or CCNA, the port right here at the end is for the Docker container. And the port right here is for the host. So I'm essentially saying match port 80 to port 80. And then I'll name my guy, name it NC coffee. And then I'll specify the image, which is the network Chuck port slash NC coffee. And then colon French press. And it'll be quick done. I'll do Docker PS. It's running. Now here's what I want you to do. If you go back to your Linode dashboard here, grab the IP address once more, copy it, and then just plug that into your browser. Go to it. Ah, it's a Docker container running my website. I made, obviously it's a professionally designed website. Click on the link. It'll take you to CBT nuggets. I mean,  it's top notch. If you want to hire me for web development, I'm available.  let me ask you a question. Did you set up this website? Did you alter any settings, install any programs? Did you put in this, like, did you do any of this? No. But if you pulled down that image and ran that container, like I just demonstrated, you have a website that looks just like this. You see that container not only has its own OS CPU processes, memory, but it also has all the settings I applied. Our website configuration. Um, all the prerequisites, all the dependencies packaged together and a neat little package, a container, no need to mess with it. It's perfect. And you can move that sucker to any computer, any Linux based machine. And it runs like a champ. I can move the same Docker container to AWS, to Azure, to your computer, to my computer, to wherever. And it's going to run the same and that's the power of Docker. So everything from the OS, which is Debian Linux to the things I had to install to make it work. Nginx, which is a web server software. And then all the website files that I used, which you can tell by the quality of the site took a lot of stuff. And then anything else I might need all dependencies packaged into a nice, neat container that can run anywhere. And now we're at number three of our objective, kind of talking about the big, why, what, why, why Docker containers? Why are they so killer compared to virtual machines? And really why should you care about them? We've seen a few of the things like they're lightweight and they're fast. And we just saw what I think is one of the coolest things about it is that they're portable. No matter where they run, they run. Another example of why this is absolutely killer is like, look here, I've got different flavors of Ubuntu. I might have apps that aren't compatible to run on a certain version of Ubuntu. Oh, and by the way, before we go any further, if you want to stop any of these containers, you can do that here to do stuff, Docker stop, and then the container name. So I'll drop like one of my, uh, I'll, I'll drop Alpine. Oh yeah. And then I can start them right back up again. Docker start. Oh yeah. Yeah. And bam, he's up again. And if you want to like see how much CPU they're using memory network, we can do doctor stats and we get this cool. I mean, I think it's cool view of all that's going on real time. And then control C to back out of there. Well, this is for all of you who told me to try out arch Linux. I can install as a Docker container as well. And boom, just like that. I'm running arch Linux. Okay. At this point, we've learned a bit about Docker containers. We've even created a few and played around with the command line that that was fun. Now we're going to go just a little bit deeper, not too deep. Cause we're, we don't have the time, but we'll talk about, okay, why is it so fast? Why is it so lightweight? And how is the industry using it right now? This will be real quick. Let's talk about it. So first of all, why is it so fast? How does it boot up so fast? How do we create containers so quickly? What's the voodoo behind that? The short answer is that you only need one kernel. Notice that over here when I'm demonstrating Docker, all of these OS's are Linux based. They all share the underlying Linux kernel, just like Ubuntu does. So Ubuntu, when we installed him, he's running off the Linux kernel. And it's the same Linux kernel that all of these OS's right here would use. So this part of the OS is already up and running. And that's in stark contrast to over here on a virtual machine. You see each of these OS's have their own Linux kernel. They're spinning up. I'll just put LK for the rest because they are virtual machines. And every time you deploy a new virtual machine, that's another Linux kernel and then the operating system. And that steps into the other part is they're lightweight. Why are they lightweight? Because we don't need more than one Linux kernel. You see these virtual machines to run more than one OS and to have this app isolation, like we want to with containers, we have to have a guest operating system every time, which involves another kernel. It involves a hypervisor, which is also kind of heavy. So it's overall just heavy. There are more parts and pieces that have to be running to make that work. Whereas a container is much more simple, lightweight, and fast. Now, one thing I want you to note, and you probably noticed this. I have a windows server over here, but I didn't install windows server over here on Linux. You can't do that. Containers are available. Docker. You can install on windows based systems, windows 10 windows server, I believe 2016 and up, but you can only install windows based containers on a windows system. Same goes for Linux. You can only install Linux based containers on a Linux system because they share the same underlying OS or kernel and yeah, a Docker on windows is cool. You can install Docker containers on windows and it shares the same qualities as a Linux Docker container. They're isolated. They have their own processes and memory and network. It's just as cool. Now, what I've given here was a very high level overview. We didn't go very deep at all. Docker is a big thing. Like there's, there's an entire Docker certification. It's, it's huge. And if you want to learn more, go deeper because there's a lot more, maybe you want to learn more about how containers work. Maybe you want to learn, Hey, they're using control groups, which are defining how much CPU, how much memory, how much OS resources that you're giving each Docker container, and then how they're segmenting it, isolating everything with namespaces. And by the way, these two concepts that can be attributed to containers have been around for a long time. Containers have been a thing for a very, very long time. Docker isn't the only type of one either. So it's, it's a whole big thing. So if you want to dive deeper, if you want to create your own Docker containers, there's a great course from Sean Powers at CBT Nuggets link below. And if you want to learn more just about the behind the scenes and under the hood, I link some books and stuff below as well. And the last thing I wanted to mention is how is the industry using Docker? Well, we already demonstrated that we could put a Docker container up in the cloud Linode. We just did that. You can move that same Docker container to Azure to AWS. They have the same sort of situation with Docker. It's just like a web app. You deploy and you can launch your containers. This is killer for developers because they can write their code, deploy it in a Docker container and know that it works everywhere. And that's a problem with developers that they've had for a long time is that they'll write an app on their computer and it works great. They spent time polishing it, you know, dotting their eyes and all kinds of stuff. And then that same code is run by, I don't know, a tester and it doesn't work. And the developer's like, well, Hey, it worked on my machine. I don't know what you're doing. No more of that junk. No more of that. Because if you deploy it in a Docker container, everything that app needs is right there in its container. It's contained, it's isolated. And finally the last thing that is kind of taken the industry by storm is the concept of microservices. And this is more for developers, but as a person who's in it and as you move into more DevOps stuff, this is stuff you'll understand and have to work with. Microservices involves taking portions of your application, um, your stack and, uh, and segmenting it into smaller bits and pieces. So traditionally you might have, you know, one server where you install your entire application, everything you need. So for example, WordPress, you might install your WordPress server and your, your MySQL SQL database on the same box. And that's traditionally what developers might've done is they would install as many compatible apps as they could on one server. But now with containers, they can take one app in particular, like maybe just the WordPress server and have that in one container. And then maybe take the MySQL portion and have that in one container. So they're isolated. There's no conflicting things. And when you want to update one portion of your app, you're just updating one container. And that's a whole other topic for discussion, a whole big world. It's fun. It's exciting. And I'm hoping that this video got you started on Docker and it won't be your endpoint. I hope you go further with this. And you know, let me know if you want me to make more videos about Docker. Well, that's about it. Docker is a big thing and I hope you be a fun watching this video. Let me know what you thought in the comments. And also let me know how you're, you're going to use Docker. I mean, there's a variety of ways. Like for example, in my own home, I have Docker running on my Synology server and I have a container that's running home assistant, which is a home automation framework, I guess. It's really cool. You can also run things like pie hole and just a ton of stuff. It's, it's, it's amazing what you can do. Not to mention that if you're learning Linux, you want to try out all kinds of different Linux distributions. You saw how easy it was to set up that lab. Oh my goodness. It's so powerful. Whew. I've been talking too much. So if you haven't already hit that subscribe button, if you like what I'm doing here and hit that notification bell, always get notifications when I go live or when I have new videos. And also don't forget to support the sponsor of this video, Linode. If you want to deploy a website or an app or just a Minecraft server, uh, link below, you get $20 credit. So if you didn't get a chance to lab, do it now. I'll catch you guys later. 