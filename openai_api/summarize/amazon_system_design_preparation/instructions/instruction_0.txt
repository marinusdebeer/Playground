user:
Please turn the following into an article including all the key ideas: 
I'm Sameer Koppal. I'm a software development manager at Amazon. Today we're going to be talking about the system design portion of the interview. At Amazon, we build scalable, reliable, cost-optimal, and performance systems, and system design is a very key aspect for it. We build distributed systems and platforms that are used by millions of users. In your interview, you will be asked to design a system, and the three key things that I want to talk to you about while you do so is, one, don't jump into solving the problem. Try to understand what the question is. Go ahead, ask more questions. Ask questions about the scale, about the performance, about whether it needs an API. And then lastly, try to make this a conversation between you and your interviewer. You want to go ahead and solve it like you would do with a team, right? So go ahead, talk to your interviewer about, hey, this is what I'm thinking. This is where I'm going with this. These are the key components of the API. So today's system design problem is going to be designing an online bookstore. Let's think through when you get a question like online bookstore. I'm pretty sure everyone thinks about a lot of things. Let's start asking those questions. It's a very vague and ambiguous statement to design an online bookstore. So the first question that comes to mind is, what kind of books? Is it going to be e-books or just regular books, right? And I would say write those down. So you can be, as you get your answers, you can say e-books, regular books. As I mentioned earlier, asking questions is key. It's helping you clarify the requirement. It's helping you set expectations with your interviewer on what's expected. So you can start asking questions on scale. How many users? Let's say 6 million users. Ask what your transactions per second are going to be. Let's say 500 transactions per second. Writing this down is going to enable you to come back to this while you're doing your design. A lot of times we end up getting requirements but not using them in the design. So you're actually missing out on those expectations. Again, make sure that you're having a dialogue with your interviewer. It's like, think about when you're in a room and trying to design for a team. Step away from this being just an interview. Think about you're actually designing a system that's going to be implemented by someone. The other thing I'd want to call out is, if you have any assumptions that you're making, ask them. Validate those. It could be like, I'm assuming there's a payment service or there is an order service that actually exists. The other thing you want to do is focus on your strengths. If you're a good front-end developer, start by identifying the use case. Start with your front-end. If you're a back-end or a database person, go ahead and start talking about the database. Start creating those entities and work up to the front-end from there. All right. So let's get into this. Let's go ahead and identify what are the key components here. So you're going to have a front-end. You're going to go ahead have a web server. And then, lastly, a database. These are the high-level components that you have that you're going to go ahead and work with. As we go through the process, we're going to start going into details of each one. You're going to work with your interviewer on what's the right level of detail. Your interviewer may interrupt you and ask you questions. That doesn't necessarily mean that they're not happy with the answer. What they're looking for is more data or more details on it. So work with them. And as I mentioned previously, have that dialogue, right? So it's like you're in the room trying to talk to a team. All right. So I'm a back-end guy. So let's start with the database and then work our way up to the front-end. All right. So let's start with the database. And what you want to do is you want to identify the key components within the database. So we're now starting to get into details. Over here, you'd have something called a customer. You want to get into more details of what is it that you want to capture about a customer. You want to go ahead and capture the name, generate an ID for that customer. You want to go ahead, probably capture the address, other demographic details that you might need. The next entity is going to be an order entity because what does the customer do? The action here is the customer places an order. Same thing with the order. You want to go ahead and capture a transaction ID, payment methods, date of the transaction, so on and so forth. And then the other entity that you want to go ahead and capture here is the books itself. Again, with the book, you'll have an ID for a book, an author, and you can add more details about the version of the book, the date of release, et cetera, et cetera. Again, work with your interviewer on the level of detail that they're acquiring over here. So now that we've got the database done, let's talk about the API. This is a key aspect of how the data is going to be served. So you want to go ahead and talk about how to construct an API. You're going to have a domain. You're going to have the resource that this API is going to act on, and then if you need any additional parameters. You want to go ahead and describe this to your interviewer so they know that you have an understanding of how an API is constructed. What does it do? The next thing you want to do is go ahead and talk about a use case. Let's take a use case over here of inserting a book into the table. It's going to be an HTTP post operation. You want to now use the API URL and construct it. You want to say xyz.com slash books, and that's going to be an HTTP post. When you do a post, you need a JSON object, so go ahead and describe a JSON object. It's going to have an ID. It's going to have an author. It's going to have the price of the book. As you do that, you're describing to your interviewer an understanding of the JSON objects, and then when you go ahead and have done that, you can talk about other operations like an HTTP get or an HTTP put or a delete and talk about where or what those use cases are and how they can be used. You also want to go ahead and use the examples or the requirements that we got before about an e-book. Is this going to work for an e-book? Is this not going to work for an e-book? What are the changes that you would make? Then you want to go ahead and talk about the transactions. Is this API going to be able to support 500 transactions per second? As you do that, you're going to start building a much closer diagram of how your architecture is coming along. This is going to lead to a service-oriented architecture. Let's see how that architecture is coming along. We just went ahead and defined the database. We spoke about some APIs. I'm going to call them services. You could go, say, server service. You can have a payment service. You can have a service for books. You can have a service for search, and you can have more services. You want to go ahead and define how these interact with each other. You want to go ahead and define if each has its own database or they have different databases, and you can start getting into those details with the interviewer. At this point, you might get more questions on what each service does, whether you need to have different services, whether you can group them into one, can they write to different databases, and so on. So prepare yourself for having answers to questions like that. Now, this naturally progresses into the front end and how it's going to utilize these services. All right. So now let's bring this design to life, right? It's going to be through user experience and to the user interface. You want to go ahead and define what that homepage or the landing page for that website is going to be like. I'm going to imagine this is a search box with a search button on it. It's simple. You can go ahead and talk to your interviewer about this and ask them if this is okay, if they're expecting more, if they want things like recommendations, how you're going to tweak your design to go ahead and do that, and that's a conversation that you can have. But for now, and for simplicity, we're going to keep this as a simple search box with a search button on it. I'm going to type in XYZ, hit search. This is where you go ahead and connect it back to your design. You can talk about what this search button does. It invokes the search API. It goes ahead and passes the parameter for the book. Then it calls the books API, which goes ahead and gets the book. And then lastly, once you have the response object back, you want to talk about how that page is going to look to the user. You can talk about having an image of the book, the name of the author, the price of the book, and so on. This is going to give your interviewer a good idea of you understanding how to render the response that you get back. We just saw a design come to life from backend all the way to frontend. We had a conversation with our interviewer. We gathered all the requirements. Go ahead and listen to your interviewer. They're going to give you tips. They're going to give you guidance through the interview and help you come up with a great design.
